该模块是DCGAN生成网络项目模块。

功能描述:
我们根据第一步的图片分类，从网上的json文件读取图片文件，加载到本地中
再用glob读取图片，之后用GAN网络进行生成，同时这个算法也可以修改成识别真伪，以及设计师等工作平时用来生成图片的功能，以便降低他们的工作量。



技术描述:
GAN:用一个D网络进行判断图片的真伪，为了让D网络开始就能识别出来，我们需要先进行训练出参数w和b。
然后在真正运行时将这个w和b作为初始变量传入D中，这是个二分类过程。1代表是真图，0代表假图，我们自己
设计一损失函数，优化这个损失函数，让其识别能力加强。

同时再创建一个G网络，用来生成图片，生成的图片经过D网络的检查判断出是真的我们就成功了。

所以关键点在于俩者损失函数的设定，记住这个规律:俩者损失函数一定是相反的。由于D网络需要上一个D模型的初始化
和G网络生成的结果作为共同输入，所以它需要俩个损失函数，我们分别用log表示，因为这样更平滑且更容易区分。
D的损失 = -log(D)-log(1-G)
G的损失 = -log(G)
解析: D中第一个log(D),只要D无限接近1，我们的损失就接近0。而第二个公式G如果无限接近1，就无限接近log(0),这样损失会增大。
      但如果G无限接近1，我们的G损失就会无限接近0，达到最优化。所以这是个矛盾的损失，我们就要这种矛盾损失，使其优化到
      一个临界点，让G的损失小于D的损失，即无法识别出G网络生成的图片。
G网络的生成的原理是通过初始化噪音点，下面代码中我会有介绍。

DCGAN:在GAN的原理修改上，在网络上进行一系列优化与改进，具体如下;
1.取消pooling层，全部都用卷积层取代。
过程:
G网络开始通过一个1*100噪音向量作为初始点，然后通过全连接层生成一个特征图，之后不断的反卷积(类似机器学习的特征离散)扩大成我们需要的图片大小维度（本次是64*64）
D网络开始是普通大小特征维度图片，我们不断的卷积提取一直到输出为1个位置，这个1个就是判断出是0还是1.所以stride至少为2.

2.在G网络和D网络生成时使用正则化batchnorm
(1)通过调节正则化权重解决了初始化差的问题。
(2)原始GAN中容易梯度离散化，加入正则化使其更好地传播到每一层
(3)防止G的生成器中所有样本都收敛到同一点。

3.移除了开始的全连接层，变为卷积层。仿照了resnet网路。

4.在generator的除了输出层外的所有层使用ReLU激活函数,输出层采用tanh激活函数。(tanh:  (e^(x)-e^(-x)) /(e^x+e^(-x)) )
  tanh激活函数曲线是以0为中心，x大于0y都大于0，然后随着x越来越大y的增幅越来越小。下面同理。也就是类似log使其更平滑。
  
5.在discriminator(D网络生成函数)所有层使用
LeakyReLU是ReLU的 变体f(x)=max(0,x)+negative_slope×min(0,x),其中，negative_slope是一个小的非零数。数学公式上多了个E对y的偏导，我认为就是加了个类似正则化的东西，使其更稳定平滑。

6.还需要写个测试函数Sample，用于将G网络和真实图片对D网络的测试。


PS:由于本人并非图像处理方向，所以后期调参，优化地方我做过多处理，等我把其他主模块弄精后最后有时间再弄这块。毕竟我这次主要找的方向是数据挖掘。
