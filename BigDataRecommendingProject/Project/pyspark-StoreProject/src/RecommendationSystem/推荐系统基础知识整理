https://www.cnblogs.com/rongyux/articles/5396844.html
一.前言:
  我个人理解，推荐目前表面是电商类推荐，但以后会有更多的推荐项目，我这个项目其实也是主要按照我对以后发展的设想所整理的各个模块:基于图像推荐。
  基于文本语言推荐，预测推荐。而且我还设想用强化学习将其智能化，并解决冷启动问题(目前还只是设想，理论，和测试，如果想落地，还需要进入公司后得到公司支持。)
  除了我这里的项目中，我认为未来推荐不光需要基于用户点击行为的历史记录和在线操作。更应该预先推断出用户的需要，去推荐，实现真正的智能化，
  也就是说推荐的本质是回归问题，目前还处于监督学习，未来需要大量的无监督学习去实现。
  
 二.推荐目前主流作用
 1.帮助用户找到想要的数据(各种商品，兴趣爱好这些我都归于数据。)，并从中挖掘他们，预测出用户未来喜欢什么，同时进行一定的分类，去对不同类的用户
 挖掘出他们喜欢什么。

2.降低信息过载,简单说就是帮助用户过滤掉他们不喜欢的信息。

3.与广告的搭配-->提高站点的点击率/转化率，促使用户频繁点击一个站点，并让用户得到他们想要的。这也是我在本次项目中主要处理推荐和广告模块的原因
 
4.加深对用户了解，为用户提供定制化服务: 推荐用户感兴趣后，也加深了对用户兴趣爱好等维度形象了解，创建用户画像，增加维度，并挖掘出用户未来的喜好。

三.推荐算法分类
传统的推荐算法一般是输入参数为用户和item属性和特征包括年龄、性别、地域、商品的类别、发布时间等等。
经过推荐算法处理后，返回一个按照用户喜好度排序的item列表。

而现在推荐算法用在很多领域，比如基于文本，推荐价格，返回一个商品价格表，基于用户行为，判断出用户是否喜欢这个数据，或者用户是否适合去哪个地方。
等等。

大致可以分为以下几类：

1.基于流行度算法：以前是解决冷启动的算法，一个弱智脑残暴力没办法的算法。但有时候会起到很好的效果。我个人建议以后这个
算法应该被取代。它是根据PV、UV、日均PV或分享率等数据来按某种热度排序来推荐给用户的脑残算法。最后按照热度流行度并分类(体育，政治等)推荐给
刚注册或刚点击站点的用户。

************************************************************************************************************************************

2.协同过滤算法(CF):这个是很常用的算法，虽然我个人感觉也很一般。但没办法，这样做确实有数据依据。类似KNN算法。
(1)基于用户CF:User-basedCF
原理:
a.分析各个用户对item的评价。(通过浏览记录，购买记录)
b.依据用户对item的评价计算得到所有用户之间的相似度
c.选出与当前用户最相似的N个用户。
d.将这N个用户评价最高并且当前用户又没有浏览过的item推荐给当前用户。
举例说明:
根据网站的记录计算出一个用户与item的关联矩阵，以用户为样本数，item为特征数，评分为value.
得到一个表。我们的value值反映了用户x与item y的喜好程度。
然后计算相似度，我们用余弦。
A用户和B用户的余弦相似度: similarity = cos(θ) = A.B/||A||.||B|| = ∑Ai*Bi / A的平方开根号 * B的平方开根号。
然后每个用户之间都这样计算，得到一个横坐标为用户，纵坐标也是用户的用户相似度表。这样我们很清晰的看到哪些用户最相似，1是最大值。0是完全不相似。
最后，我们假设给A用户推荐物品，就在表中找到A这一行中，与哪个用户最相似，或者哪几个用户最相似(N = 2)。再过滤掉用户A评价过得物品，在这些相似用户中
找到评价高的(可以设定评价分阈值)推荐给用户A。

注意: 这个只能针对已知类别的情况(也就是已知领域，用户在进入一个领域，比如游戏，书籍的界面中，这样推荐，强调在一个范围内)。

************************************************************************************************************************************

(2)基于物品CF:Item-basedCF
原理:
a.分析各个用户对item的浏览记录
b.依据浏览记录分析得到所有item之间相似度
c.对于当前用户评价高的item,找出与之相似度高的N个item
d.将这N个item推荐给用户。
步骤与上面同理，改为物品相似度即可。相似度请看我写的相似度文章即可。

注意:
(1)如果用户同时浏览item1,item2,他们的相似度为1.
(2)最后是选取 相似，评分高，N个物品 三种条件。 这三个条件中相似用余弦可以计算，评分是用户行为，N是我们自己设定，所以这种算法是一个很少超参的算法。
在我眼里是个弱类算法，只能当辅助用。

所以我总结了以下缺点:
(1)不好避免离群点和噪点:用户评分很大概率存在瞎评分，导致模型不准确，容易过拟合
(2)这种算法导致大热物品集中推荐给用户，导致不热的物品或者一些应该更适合用户的物品却不热很难推荐，因为我们最后决定的三个条件之一是评分。这样
大热物品被选的概率大。
(3)过于依赖用户行为，解决不了冷启动。
(4)在广告系统中，由于更新速度快，大量item不会有用户评分造成评分矩阵稀疏，不利于内容推荐。当然后续可以用FM类算法解决。但结果依然不是太好。

在(4)中，广告系统某美国人开发的FM因子分解和台大三个傻子发明的FFM用于不同领域的因子分解可以解决。大概思路如下:
我们把一个nm矩阵分解成nk 矩阵 * k*k *k*m矩阵。这个k是用户的特征，兴趣爱好与物品属性的一些联系，通过因子分解，找到物品与用户潜在联系。
填充矩阵的缺失值。 而FFM在FM基础上，又加入不同领域存在的潜在关联，比如国家与节日，中国，美国针对双十一，感恩节会导致广告推荐系统中数据的巨大变化。
具体，我会在推荐算法里讲解。

************************************************************************************************************************************

3.基于内容推荐的算法
也就是我们本次项目中的推荐，与搜索词，当然我后续还会更新基于物品用户的模型。
前提:CF算法看起来很好很强大，通过改进也能克服各种缺点。那么问题来了，假如我是个《指环王》的忠实读者，
我买过一本《双塔奇兵》，这时库里新进了第三部：《王者归来》，那么显然我会很感兴趣。然而基于之前的算法，
无论是用户评分还是书名的检索都不太好使，于是基于内容的推荐算法呼之欲出。
举个栗子，现在系统里有一个用户和一条新闻。通过分析用户的行为以及新闻的文本内容，我们提取出数个关键字。
这些关键字，我们可以用word2vec/Fast2Vec转化为词向量，使其可以聚类达到向量化。
向量化后，再计算距离，就可以得到该用户与新闻的相似度了。

问题1：新闻里同时出现在关键字体育、足球、英超，显然匹配前两个词都不如直接匹配英超来得准确，
系统该如何体现出关键词的这种“重要性”呢？这时我们便可以引入词权的概念。在大量的语料库中通过计算
（比如典型的TF-IDF算法），我们可以算出新闻中每一个关键词的权重，在计算相似度时引入这个权重的影响，就可以达到更精确的效果。

所以最后文本相似度公式为: sim(user,item) = 文本相似度(user,item) * 词权

问题2:经常接触体育新闻方面数据的同学就会要提出问题了：要是用户的兴趣是足球，而新闻的关键词是德甲、英超，
按照上面的文本匹配方法显然无法将他们关联到一起。在此，我们可以引用话题聚类

利用word2vec一类工具，可以将文本的关键词聚类，然后根据topic将文本向量化。如可以将德甲、英超、西甲聚类到“足球”的topic下，
将lv、Gucci聚类到“奢侈品”topic下，再根据topic为文本内容与用户作相似度计算。

总结:综上，基于内容的推荐算法能够很好地解决冷启动问题，并且也不会囿于热度的限制，因为它是直接基于内容匹配的，而与浏览记录无关。
然而它也会存在一些弊端，比如过度专业化(over-specialisation)的问题。这种方法会一直推荐给用户内容密切关联的item，而失去了推荐内容的多样性。

********************************************************************************************************************************

Logistics回归预测。我们通过分析系统中用户的行为和购买记录等数据.得到一个表:
表中的行是一种物品，x1~xn是影响用户行为的各种特征属性，如用户年龄段、性别、地域、物品的价格、类别等等，
y是目标值，则是用户对于该物品的喜好程度，可以是购买记录、浏览、收藏等等。通过大量这类的数据，我们可以回归拟合出一个函数，
计算出x1~xn对应的系数，这即是各特征属性对应的权重，权重值越大则表明该属性对于用户选择商品越重要。

这就是机器学习方法，用logistics回归，在我们模型融合时也是求线性权重，不同的是，我们的模型是特征，而这里的特征是每个影响物品的用户行为属性.
权重越大说明该特征越重要。这里有个前提条件:样本数大于特征数，否则方程无法求解。

当然这是基于物品的基于模型，基于用户的也同理，可以把物品的性质当做特征，但这样又是个稀疏矩阵。

注意:
这里会用到大量特征拼接。
在拟合函数的时候我们会想到，单一的某种属性和另一种属性可能并不存在强关联。比如，年龄与购买护肤品这个行为并不呈强关联，
性别与购买护肤品也不强关联，但当我们把年龄与性别综合在一起考虑时，它们便和购买行为产生了强关联。比如（我只是比如），
20~30岁的女性用户更倾向于购买护肤品，这就叫交叉属性。通过反复测试和经验，我们可以调整特征属性的组合，拟合出最准确的回归函数。
这就是特征拼接，我在项目中大量尝试这个方法，然后去拟合测试，而深度学习就是帮我们完成了这一步。

总结:基于模型的算法由于快速、准确，适用于实时性比较高的业务如新闻、广告等，而若是需要这种算法达到更好的效果，
则需要人工干预反复的进行属性的组合和筛选，
也就是常说的Feature Engineering。而由于新闻的时效性，系统也需要反复更新线上的数学模型，以适应变化。
所以为了解决这一问题，才有了强化学习。

************************************************************************************************************************************
4.混合算法
其实本质就是模型融合，不同算法调权重得到最后的效果。

5.特征过滤
们往往还需要对结果进行处理。比如当推荐的内容里包含敏感词汇、涉及用户隐私的内容等等，就需要系统将其筛除；若数次推荐后用户依然对某个item毫无兴趣，
我们就需要将这个item降低权重，调整排序；另外，有时系统还要考虑话题多样性的问题，同样要在不同话题中筛选内容。

三.推荐结果评估
当推荐算法完成后，怎样来评估这个算法的效果？CTR（点击率）、CVR（转化率）、停留时间等都是很直观的数据。在完成算法后，
可以通过线下计算算法的RMSE（均方根误差）或者线上进行ABTest来对比效果。 我们这次项目用的是rmpse,使得数据更平滑。

四4、改进策略
用户画像是最近经常被提及的一个名词，引入用户画像可以为推荐系统带来很多改进的余地，比如： 

1、打通公司各大业务平台，通过获取其他平台的用户数据，彻底解决冷启动问题；
2、在不同设备上同步用户数据，包括QQID、设备号、手机号等；
3、丰富用户的人口属性，包括年龄、职业、地域等；
4、更完善的用户兴趣状态，方便生成用户标签和匹配内容。

另外，公司的优势——社交平台也是一个很好利用的地方。利用用户的社交网络，可以很方便地通过用户的好友、
兴趣群的成员等更快捷地找到相似用户以及用户可能感兴趣的内容，提高推荐的准确度。






