1.讲解: https://blog.csdn.net/hungryof/article/details/53981959
最近博客：https://blog.csdn.net/qq_23126625/article/details/80597963
做图像项目宗旨: 要确立一个目标，就是创建目标函数然后计算损失。比如这里就是C与S的噪音点中间点为目标函数，优化它。另外，我们最后需要测试的时候通过transform生成网路直接获得准确参数，所以我们这里style和content都要计算出经过transform生成网络(下面左边图)和vgg的Loss(下面右边图)和只经过vgg的loss。这个差值就是最终loss,越小越好。
2.目的: 我们的结果CS=C+S 争取要让CS与C的差距和S的差距都小。
3.难点:优化到什么程度才行，也就是内容是C，风格是S，不能用像素点，所以在特征图上做文章。
需要利用噪音，也就是开始将C,S噪音都输入进行卷积一系列操作。通过第一层卷积后得到C1,S1,N1。让N1接近S1和C1,所以设定目标函数接近N1.以后所有层都是这样。
4.实际操作，是让一个空的"白纸随机"的噪音N1特征图不断地接近每一层的C1,S1。
5.新的网络做这个案例:
在Loss Network处进行切分，左边是A网络(Transform网络)，右边是B网络。

方法:先训练出一个transfer的Model。再实际把图像传进来。这样不用再来回迭代，直接一个前向传播得到结果值。正常我们是传来图像，调节w参数，但这样太慢，以下是提出的新的网络。

左边分析:（本质是生成网络）
特征图就是每层卷积出来的图。
Transform:将输入的图像进行融合，生成一个新的net结构。输入的图像就是我们的原始图像,最终生成在style与原始图片之间的损失函数。
图片先下采样(深度(特征图个数)增高,特征图大小降低)再transform(生成网络,将正常图像输入自动进行融合)，然后得到style-transoform结果，然后输出希望跟原图一样，所以进行上采样（还原操作，也就是反卷积，拉平操作。）。

图中Image部分是3层卷积，transform是5层参差网络，Net是2层反卷积。
参差网络:因为深度学习效果不一定随着层数增加而更好，参差网络是做个同等映射，也就是跳跃卷积的结果和经过卷积的结果求和。X为经过卷积，X'是跳过卷积的结果。然后需要判断，如果X效果不好，此期间的W就调成0，然后取X'。如果X效果好，就选择这俩层卷积以及相关的W参数。
在网络中是相加。一个是原始层经过俩层结果+跳过的结果

右边分析:
上面生成了三种图片: 噪音点原图，噪音点风格图，噪音点它俩之间的图。
用别人训练好的VGG网络。
VGG是用来计算LOSS,比如当前图像输进后，需要进行对比,生成的图像还要跑VGG-16。Yc表示真实图像,Ys是风格图像。y^是我们左边公式生成出的图像。然后比较y^跟Yc和Ys的差异是有多大的。
style我们用了四层，因为style图中一般表达很多种因为，比如纹理，颜色深度，所以层数要多一些。
所以在风格图里我们取四个层，在原图中取一个层进行计算。在损失函数中Loss style和Loss content(原图)前面设置权重参数，表明我们更注重哪个。根据我们的业务需求来调整。

本质是左边出来的y^的生成网络出来后跟Ys和Yc进行对比,然后学到一个什么样的生成网络。然后得到transform的model,再进行测试时就不用VGG-16，只需要跑一次前向传播。不需要便生成边迭代。
所以我们测试时要让图片经过transform生成的loss值与经过transform和vgg的loss值差值越小越好。这样就不用再跑vgg16

问题:一次只能是一种图。因为我们的style-target是固定的。
为了多元化，我们看右图中style取了四个层级。

常用命令
1.训练命令
需要输入一个命令，是模型目录和style的图片，一次style只能一张。
举例:
--checkpoint-dir ./model/ --style ./style/wave.jpg 

2，测试命令
指定checkpoint,传入原始图像路径，输出图像路径。
--checkpoint ./model/xxxx.ckpt --in-path ./examples/content/xxx.jpg --out-path ./

3.









